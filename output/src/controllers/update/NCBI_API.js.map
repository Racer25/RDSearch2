{"version":3,"file":"NCBI_API.js","sourceRoot":"","sources":["../../../../src/controllers/update/NCBI_API.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,IAAI,eAAe,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAClD,mCAAmC;AAIxB,QAAA,eAAe,GAAG,IAAI,eAAe,CAAC;IAC7C,iBAAiB,EAAE,CAAC;IACpB,qBAAqB,EAAE,OAAO,CAAE,oCAAoC;CACvE,CAAC,CAAC;AAEQ,QAAA,gBAAgB,GAAG,UAAS,YAAmB,EAAE,UAAiB;IAEzE,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;QAE3B,IAAI,GAAG,GAAC,4DAA4D,CAAC;QAErE,OAAO,CACH;YACI,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,IAAI;YACV,IAAI,EACA;gBACI,EAAE,EAAC,QAAQ;gBACX,IAAI,EAAE,YAAY,GAAC,MAAM,GAAC,oBAAoB,GAAC,MAAM,GAAC,eAAe;gBACrE,IAAI,EAAE,WAAW;gBACjB,OAAO,EAAE,MAAM;gBACf,MAAM,EAAC,MAAM;gBACb,OAAO,EAAC,KAAK;aAChB;SACR,EACD,UAAS,GAAG,EAAE,QAAQ,EAAE,IAAI;YAExB,EAAE,CAAA,CAAC,GAAG,CAAC,CACP,CAAC;gBACG,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC;YACD,EAAE,CAAA,CAAC,IAAI,IAAI,SAAS,IAAI,IAAI,CAAC,aAAa,IAAI,SAAS,CAAC,CACxD,CAAC;gBACG,IAAI,MAAM,GAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;gBACrC,EAAE,CAAA,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,KAAK,SAAS,CAAC,CAChD,CAAC;oBACG,EAAE,CAAA,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,qBAAqB,CAAC,MAAM,KAAK,CAAC,CAAC,CACrE,CAAC;wBACG,MAAM,GAAG,EAAE,CAAC;oBAChB,CAAC;gBACL,CAAC;gBACD,OAAO,CAAC,GAAG,CAAC,+CAA+C,GAAC,YAAY,GAAC,eAAe,GAAC,UAAU,GAAC,YAAY,GAAC,MAAM,CAAC,MAAM,GAAC,MAAM,CAAC,CAAC;gBACvI,OAAO,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC;QACL,CAAC,CACJ,CAAC;IACN,CAAC,CACJ,CAAC;AACN,CAAC,CAAC;AAES,QAAA,0BAA0B,GAAG,UAAS,MAAoB,EAAE,UAAiB;IAEpF;;;;;SAKK;IAEL,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;QAE3B,IAAI,GAAG,GAAC,6DAA6D,CAAC;QAEtE,OAAO,CACH;YACI,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,IAAI;YACV,IAAI,EACA;gBACI,EAAE,EAAC,QAAQ;gBACX,EAAE,EAAE,MAAM,CAAC,QAAQ,EAAE;gBACrB,OAAO,EAAE,KAAK;aACjB;YACL,OAAO,EAAC,KAAK;SAChB,EACD,UAAS,GAAG,EAAE,QAAQ,EAAE,IAAI;YAExB,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;gBAAA,MAAM,CAAC,GAAG,CAAC,CAAC;YAAC,CAAC;YAEvB,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;YACjC,MAAM,CAAC,WAAW,CAEd,IAAI,EACJ,UAAU,GAAS,EAAE,IAAQ;gBAEzB,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;oBAAA,MAAM,CAAC,GAAG,CAAC,CAAC;gBAAA,CAAC;gBACtB,OAAO,CAAC,GAAG,CAAC,uDAAuD,GAAC,UAAU,CAAC,CAAC;gBAChF,EAAE,CAAA,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,CAAC,CAC3D,CAAC;oBACG,IAAI,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;oBAClF,IAAI,oBAAoB,GAAC,EAAE,CAAC;oBAE5B,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAChD,CAAC;wBACG,IAAI,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;wBAChE,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CACtB,CAAC;4BACG,IAAI,qBAAqB,GAAG,oBAAoB,CAAC,SAAS,CACtD,UAAS,YAAY,IAAE,MAAM,CAAC,YAAY,CAAC,IAAI,IAAI,UAAU,CAAA,CAAA,CAAC,CAAC,CAAC;4BAEpE,oCAAoC;4BACpC,EAAE,CAAA,CAAC,qBAAqB,IAAI,CAAC,CAAC,CAAC,CAC/B,CAAC;gCACG,oBAAoB,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,EAAE,CAAC;4BACvE,CAAC;4BACD,IAAI,CACJ,CAAC;gCACG,gCAAgC;gCAChC,IAAI,gBAAgB,GAChB;oCACI,IAAI,EAAE,UAAU;oCAChB,UAAU,EAAE,UAAU;oCACtB,oBAAoB,EAAE,CAAC;iCAC1B,CAAC;gCAEN,uBAAuB;gCACvB,oBAAoB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;4BAChD,CAAC;wBACL,CAAC;oBACL,CAAC;oBACD,OAAO,CAAC,oBAAoB,CAAC,CAAC;gBAClC,CAAC;gBACD,IAAI,CACJ,CAAC;oBACG,MAAM,CAAC,KAAK,CAAC,mEAAmE,GAAC,UAAU,GAAC,iBAAiB,GAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;gBACjI,CAAC;YACL,CAAC,CACJ,CAAC;QACN,CAAC,CACJ,CAAC;IACN,CAAC,CACJ,CAAC;AACN,CAAC,CAAC;AAES,QAAA,+CAA+C,GAAG,UAAS,MAAoB;IAEtF,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;QAE3B,IAAI,GAAG,GAAC,0DAA0D,CAAC;QACnE;;;;;;WAMG;QAEH,OAAO,CACH;YACI,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,IAAI;YACV,IAAI,EAAC,EAAC,MAAM,EAAC,QAAQ,EAAE,QAAQ,EAAC,uBAAuB,EAAE,OAAO,EAAC,MAAM,EAAE,EAAE,EAAE,MAAM,EAAC;YACpF,kBAAkB,EAAE,EAAC,WAAW,EAAE,QAAQ,EAAC;YAC3C,OAAO,EAAE,KAAK;SACjB,EACD,UAAS,GAAG,EAAE,QAAQ,EAAE,IAAI;YAExB,EAAE,CAAA,CAAC,GAAG,CAAC,CACP,CAAC;gBACG,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,+EAA+E,GAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC3G,EAAE,CAAA,CAAC,IAAI,IAAI,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,SAAS,CAAC,CACnD,CAAC;gBACG,IAAI,UAAU,GAAC,EAAE,CAAC;gBAClB,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAC5C,CAAC;oBACG,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,SAAS,CAAC,CAC5C,CAAC;wBACG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACjE,CAAC;oBACD,IAAI,CACJ,CAAC;wBACG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACvB,CAAC;gBACL,CAAC;gBACD,OAAO,CAAC,UAAU,CAAC,CAAC;YACxB,CAAC;YACD,IAAI,CACJ,CAAC;gBACG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACxB,CAAC;QACL,CAAC,CACJ,CAAC;IACN,CAAC,CACJ,CAAC;AACN,CAAC,CAAC;AAES,QAAA,eAAe,GAAG,UAAS,MAAoB,EAAE,UAAiB;IAEzE,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;QAE3B,IAAI,GAAG,GAAC,2DAA2D,CAAC;QACpE,IAAI,YAAY,GAA8B,EAAE,CAAC;QAEjD,IAAI,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QACxC,GAAG,CAAA,CAAC,IAAI,CAAC,GAAE,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EACpC,CAAC;YACG,YAAY,IAAI,GAAG,GAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC;QAED,OAAO,CACH;YACI,OAAO,EAAE,EAAC,cAAc,EAAG,mCAAmC,EAAC;YAC/D,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,EAAC,EAAE,EAAC,QAAQ,EAAE,OAAO,EAAC,KAAK,EAAE,EAAE,EAAC,YAAY,EAAC;YACnD,OAAO,EAAE,KAAK;SACjB,EACD,UAAS,GAAG,EAAE,QAAQ,EAAE,IAAI;YAExB,EAAE,CAAA,CAAC,GAAG,CAAC,CACP,CAAC;gBACG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAC,MAAM,CAAC,MAAM,GAAC,eAAe,CAAC,CAAC;YAE7E,8CAA8C;YAC9C,IAAI,aAAa,GAAO,EAAE,CAAC;YAC3B,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;YACjC,MAAM,CAAC,WAAW,CAEd,IAAI,EACJ,UAAU,GAAS,EAAE,MAAU;gBAE3B,EAAE,CAAA,CAAC,GAAG,CAAC,CACP,CAAC;oBACG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjB,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC;gBACD,aAAa,GAAG,MAAM,CAAC;gBACvB,EAAE,CAAA,CAAC,aAAa,IAAI,SAAS,IAAI,aAAa,CAAC,gBAAgB,IAAI,SAAS,CAAC,CAC7E,CAAC;oBACG,OAAO,CAAC,GAAG,CAAC,mEAAmE,CAAC,CAAC;oBACjF,MAAM,CAAC,KAAK,CAAC,mEAAmE,CAAC,CAAC,CAAC;gBACvF,CAAC;gBAED,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAC3E,CAAC;oBACG,WAAW;oBACX,IAAI,EAAE,GAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEpF,sBAAsB;oBACtB,IAAI,KAAK,GAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAExG,iBAAiB;oBACjB,IAAI,YAAY,GAAU,EAAE,CAAC;oBAC7B,IAAI,cAAc,GAAC,EAAE,CAAC;oBACtB,IACA,CAAC;wBACG,cAAc,GAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;oBAC1H,CAAC;oBACD,KAAK,CAAC,CAAC,KAAK,CAAC,CAAA,CAAC,CAAA,CAAC;4BAEf,CAAC;wBACG,EAAE,CAAA,CAAC,cAAc,CAAC,MAAM,IAAE,CAAC,CAAC,CAC5B,CAAC;4BACG,EAAE,CAAA,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CACnE,CAAC;gCACG,YAAY,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAC,KAAK,CAAC;gCAChD,YAAY,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC,KAAK,CAAC;4BAC9C,CAAC;4BACD,IAAI,CACJ,CAAC;gCACG,YAAY,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;4BACrC,CAAC;wBACL,CAAC;wBACD,IAAI,CACJ,CAAC;4BACG,GAAG,CAAA,CAAC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAE,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAC1C,CAAC;gCACG,EAAE,CAAA,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CACpC,CAAC;oCACG,YAAY,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAC,KAAK,CAAC;oCAChD,YAAY,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC,KAAK,CAAC;gCAC9C,CAAC;gCACD,IAAI,CACJ,CAAC;oCACG,YAAY,IAAI,cAAc,CAAC,CAAC,CAAC,GAAC,KAAK,CAAC;gCAC5C,CAAC;4BACL,CAAC;wBACL,CAAC;wBAED,gBAAgB;wBAChB,IAAI,OAAO,GAAC,EAAE,CAAC;wBACf,IAAI,aAAa,GAAC,EAAE,CAAC;wBACrB,IACA,CAAC;4BACG,aAAa,GAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;wBACrH,CAAC;wBACD,KAAK,CAAC,CAAC,KAAK,CAAC,CAAA,CAAC;wBAEd,CAAC;gCAED,CAAC;4BACG,GAAG,CAAA,CAAC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAE,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EACzC,CAAC;gCACG,IAAI,MAAM,GAAC,EAAE,CAAC;gCACd,EAAE,CAAA,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,SAAS,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,SAAS,CAAC,CACpF,CAAC;oCACG,MAAM,GAAC,aAAa,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAC,GAAG,GAAC,aAAa,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gCACzE,CAAC;gCACD,IAAI,CAAC,EAAE,CAAA,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,cAAc,IAAI,SAAS,CAAC,CACrD,CAAC;oCACG,MAAM,GAAC,aAAa,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gCAC9C,CAAC;gCACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;4BACzB,CAAC;4BAED,YAAY;4BACZ,IAAI,GAAG,GAAC,EAAE,CAAC;4BACX,IAAI,SAAS,GAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;4BACvG,GAAG,CAAA,CAAC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAE,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EACrC,CAAC;gCACG,IAAI,KAAK,GAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gCACvB,EAAE,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAC5B,CAAC;oCACG,GAAG,GAAC,KAAK,CAAC,CAAC,CAAC;gCAChB,CAAC;4BACL,CAAC;4BAED,aAAa;4BACb,IAAI,IAAS,CAAC;4BACd,IAAI,UAAU,GAAG,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;4BACnG,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,GAAC,GAAG,GAAC,UAAU,CAAC,KAAK,GAAC,GAAG,GAAC,UAAU,CAAC,GAAG,GAAC,WAAW,CAAC,CAAC;4BAErF,iCAAiC;4BACjC,IAAI,WAAW,GACX;gCACI,aAAa,EAAE,EAAE;gCACjB,KAAK,EAAE,KAAK;gCACZ,QAAQ,EAAE,YAAY;gCACtB,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE;gCAC3B,GAAG,EAAE,GAAG;gCACR,eAAe,EAAE,IAAI;6BACxB,CAAC;4BAEN,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACnC,CAAC;oBACL,CAAC;gBACL,CAAC;gBACD,OAAO,CAAC,YAAY,CAAC,CAAC;YAC1B,CAAC,CACJ,CAAC;QACN,CAAC,CACJ,CAAC;IACN,CAAC,CACJ,CAAC;AACN,CAAC,CAAC","sourcesContent":["import * as xml2js from \"xml2js\";\nlet PromiseThrottle = require(\"promise-throttle\");\nimport * as request from \"request\";\nimport {Disease_YearAttributes} from \"../../models/disease_year\";\nimport {PublicationAttributes} from \"../../models/publication\";\n\nexport let promiseThrottle = new PromiseThrottle({\n    requestsPerSecond: 3,           // up to 3 request per second\n    promiseImplementation: Promise  // the Promise library you are using\n});\n\nexport let getIdsFromSearch = function(searchString:string, orphanetID:string)\n{\n    return new Promise((resolve, reject)=>\n        {\n            let url=\"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi\";\n\n            request(\n                {\n                    method: 'POST',\n                    url: url,\n                    json: true,\n                    form:\n                        {\n                            db:\"pubmed\",\n                            term: searchString+\" AND\"+\" hasabstract[text]\"+\" AND\"+\" Humans[Mesh]\",\n                            sort: \"relevance\",\n                            retmode: \"json\",\n                            retmax:100000,\n                            timeout:60000\n                        }\n                },\n                function(err, response, data)\n                {\n                    if(err)\n                    {\n                        reject(err);\n                    }\n                    if(data != undefined && data.esearchresult != undefined)\n                    {\n                        let idlist=data.esearchresult.idlist;\n                        if(data.esearchresult.warninglist !== undefined)\n                        {\n                            if(data.esearchresult.warninglist.quotedphrasesnotfound.length !== 0)\n                            {\n                                idlist = [];\n                            }\n                        }\n                        console.log(\"Response from getIdsFromSearch, searchString=\"+searchString+\", orphanetID=\"+orphanetID+\" results: \"+idlist.length+\" ids\");\n                        resolve(idlist);\n                    }\n                }\n            );\n        }\n    );\n};\n\nexport let getRareDisease_YearFromIds = function(idList:Array<number>, orphanetID:string)\n{\n    /*\n    idList = idList.filter(function(currentValue, index)\n    {\n        return index < 10;\n        //return currentValue.orphanetID >= \"70568\";\n    });*/\n\n    return new Promise((resolve, reject)=>\n        {\n            let url=\"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi\";\n\n            request(\n                {\n                    method: 'POST',\n                    url: url,\n                    json: true,\n                    form:\n                        {\n                            db:\"pubmed\",\n                            id: idList.toString(),\n                            version: \"2.0\"\n                        },\n                    timeout:60000\n                },\n                function(err, response, data)\n                {\n                    if(err) {reject(err); }\n\n                    let parser = new xml2js.Parser();\n                    parser.parseString\n                    (\n                        data,\n                        function (err:Error, data:any)\n                        {\n                            if(err) {reject(err);}\n                            console.log(\"Response from getRareDisease_YearFromIds, orphanetID=\"+orphanetID);\n                            if(data !== undefined && data.eSummaryResult !== undefined)\n                            {\n                                let documentSummaries = data.eSummaryResult.DocumentSummarySet[0].DocumentSummary;\n                                let rareDisease_YearList=[];\n\n                                for(let i = 0; i < documentSummaries.length; i++)\n                                {\n                                    let yearString = documentSummaries[i].PubDate[0].substring(0,4);\n                                    if(!isNaN(yearString))\n                                    {\n                                        let rareDisease_YearIndex = rareDisease_YearList.findIndex(\n                                            function(currentValue){return currentValue.year == yearString});\n\n                                        //Is this date already in the array?\n                                        if(rareDisease_YearIndex != -1)\n                                        {\n                                            rareDisease_YearList[rareDisease_YearIndex].numberOfPublications++;\n                                        }\n                                        else\n                                        {\n                                            //Create rareDisease_Year object\n                                            let rareDisease_Year:Disease_YearAttributes =\n                                                {\n                                                    year: yearString,\n                                                    orphanetID: orphanetID,\n                                                    numberOfPublications: 1\n                                                };\n\n                                            //Ajout à la collection\n                                            rareDisease_YearList.push(rareDisease_Year);\n                                        }\n                                    }\n                                }\n                                resolve(rareDisease_YearList);\n                            }\n                            else\n                            {\n                                reject(Error(\"data === undefined && data.result === undefined !!!!, orphanetID=\"+orphanetID+\", idListLength=\"+idList.length))\n                            }\n                        }\n                    );\n                }\n            );\n        }\n    );\n};\n\nexport let getNumberPublicationsThatCiteGivingPublications = function(idList:Array<number>)\n{\n    return new Promise((resolve, reject)=>\n        {\n            let url=\"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi\";\n            /*\n            let url=\"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?id=\"+idList[0];\n\n            for(let i =1; i < idList.length; i++)\n            {\n                url += \"&id=\"+idList[i];\n            }*/\n\n            request(\n                {\n                    method: 'POST',\n                    url: url,\n                    json: true,\n                    form:{dbfrom:\"pubmed\", linkname:\"pubmed_pubmed_citedin\", retmode:\"json\", id: idList},\n                    qsStringifyOptions: {arrayFormat: \"repeat\"},\n                    timeout: 60000\n                },\n                function(err, response, data)\n                {\n                    if(err)\n                    {\n                        reject(err);\n                    }\n                    console.log(\"Response from getNumberPublicationsThatCiteGivingPublications, idList.length=\"+idList.length);\n                    if(data != undefined && data.linksets != undefined)\n                    {\n                        let lengthList=[];\n                        for(let i = 0; i < data.linksets.length; i++)\n                        {\n                            if(data.linksets[i].linksetdbs != undefined)\n                            {\n                                lengthList.push(data.linksets[i].linksetdbs[0].links.length);\n                            }\n                            else\n                            {\n                                lengthList.push(0);\n                            }\n                        }\n                        resolve(lengthList);\n                    }\n                    else\n                    {\n                        reject(Error(data));\n                    }\n                }\n            );\n        }\n    );\n};\n\nexport let getPublications = function(idList:Array<number>, orphanetID:string)\n{\n    return new Promise((resolve, reject)=>\n        {\n            let url=\"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\";\n            let publications:Array<PublicationAttributes>=[];\n\n            let idListString = idList[0].toString();\n            for(let i =1; i < idList.length; i++)\n            {\n                idListString += \",\"+idList[i];\n            }\n\n            request(\n                {\n                    headers: {'content-type' : 'application/x-www-form-urlencoded'},\n                    method: 'POST',\n                    url: url,\n                    form: {db:\"pubmed\", retmode:\"xml\", id:idListString},\n                    timeout: 60000\n                },\n                function(err, response, data)\n                {\n                    if(err)\n                    {\n                        console.error(err);\n                        reject(err);\n                    }\n                    console.log(\"Response from getPublications: \"+idList.length+\" publications\");\n\n                    //Conversion vers JS Object dans objectFromXml\n                    let objectFromXml:any = \"\";\n                    let parser = new xml2js.Parser();\n                    parser.parseString\n                    (\n                        data,\n                        function (err:Error, result:any)\n                        {\n                            if(err)\n                            {\n                                console.log(err);\n                                reject(err);\n                            }\n                            objectFromXml = result;\n                            if(objectFromXml == undefined || objectFromXml.PubmedArticleSet == undefined)\n                            {\n                                console.log(\"Invalid response from NCBI API during getPublications() execution\");\n                                reject(Error(\"Invalid response from NCBI API during getPublications() execution\"));\n                            }\n\n                            for(let i = 0; i < objectFromXml.PubmedArticleSet.PubmedArticle.length; i++)\n                            {\n                                //Id search\n                                let id=objectFromXml.PubmedArticleSet.PubmedArticle[i].MedlineCitation[0].PMID[0]._;\n\n                                //Article Title search\n                                let title=objectFromXml.PubmedArticleSet.PubmedArticle[i].MedlineCitation[0].Article[0].ArticleTitle[0];\n\n                                //Abstract Search\n                                let abstractText:string = \"\";\n                                let objectAbstract=[];\n                                try\n                                {\n                                    objectAbstract=objectFromXml.PubmedArticleSet.PubmedArticle[i].MedlineCitation[0].Article[0].Abstract[0].AbstractText;\n                                }\n                                catch (error){}\n                                finally\n                                {\n                                    if(objectAbstract.length==1)\n                                    {\n                                        if(objectAbstract[0].$ != undefined && objectAbstract[0].$ != null)\n                                        {\n                                            abstractText += objectAbstract[0].$.Label+\" \\n\";\n                                            abstractText += objectAbstract[0]._+\" \\n\";\n                                        }\n                                        else\n                                        {\n                                            abstractText = objectAbstract[0];\n                                        }\n                                    }\n                                    else\n                                    {\n                                        for(let j=0; j< objectAbstract.length; j++)\n                                        {\n                                            if(objectAbstract[j].$ != undefined)\n                                            {\n                                                abstractText += objectAbstract[j].$.Label+\" \\n\";\n                                                abstractText += objectAbstract[j]._+\" \\n\";\n                                            }\n                                            else\n                                            {\n                                                abstractText += objectAbstract[j]+\" \\n\";\n                                            }\n                                        }\n                                    }\n\n                                    //Authors Search\n                                    let authors=[];\n                                    let objectAuthors=[];\n                                    try\n                                    {\n                                        objectAuthors=objectFromXml.PubmedArticleSet.PubmedArticle[i].MedlineCitation[0].Article[0].AuthorList[0].Author;\n                                    }\n                                    catch (error){\n\n                                    }\n                                    finally\n                                    {\n                                        for(let j=0; j< objectAuthors.length; j++)\n                                        {\n                                            let author=\"\";\n                                            if(objectAuthors[j].LastName != undefined && objectAuthors[j].ForeName != undefined)\n                                            {\n                                                author=objectAuthors[j].LastName[0]+\" \"+objectAuthors[j].ForeName[0];\n                                            }\n                                            else if(objectAuthors[j].CollectiveName != undefined)\n                                            {\n                                                author=objectAuthors[j].CollectiveName[0];\n                                            }\n                                            authors.push(author);\n                                        }\n\n                                        //DOI Search\n                                        let doi=\"\";\n                                        let objectDOI=objectFromXml.PubmedArticleSet.PubmedArticle[i].PubmedData[0].ArticleIdList[0].ArticleId;\n                                        for(let j=0; j< objectDOI.length; j++)\n                                        {\n                                            let idObj=objectDOI[j];\n                                            if(idObj.$.IdType === \"doi\")\n                                            {\n                                                doi=idObj._;\n                                            }\n                                        }\n\n                                        //Date Search\n                                        let date:Date;\n                                        let objectDate = objectFromXml.PubmedArticleSet.PubmedArticle[i].MedlineCitation[0].DateRevised[0];\n                                        date = new Date(objectDate.Year+\"-\"+objectDate.Month+\"-\"+objectDate.Day+\"T00:00:00\");\n\n                                        //Création de l'objet publication\n                                        let publication:PublicationAttributes =\n                                            {\n                                                idPublication: id,\n                                                title: title,\n                                                abstract: abstractText,\n                                                authors: authors.toString(),\n                                                doi: doi,\n                                                datePublication: date\n                                            };\n\n                                        publications.push(publication);\n                                    }\n                                }\n                            }\n                            resolve(publications);\n                        }\n                    );\n                }\n            );\n        }\n    );\n};"]}