{"version":3,"file":"SymptomProvider.js","sourceRoot":"","sources":["../../../../src/controllers/update/SymptomProvider.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,0CAA0C;AAC1C,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;AAE3B,mDAA4C;AAI5C,IAAiB,eAAe,CAwB/B;AAxBD,WAAiB,eAAe;IAE5B,IAAI,QAAQ,GAA4B,EAAE,CAAC;IAC3C;QAEI,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO;YAEnB,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAC1B,CAAC;gBACG,mBAAmB,CACf,UAAU,gBAAgB;oBAEtB,QAAQ,GAAG,gBAAgB,CAAC;oBAC5B,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACtB,CAAC,CACJ,CAAC;YACN,CAAC;YACD,IAAI,CACJ,CAAC;gBACG,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC;QACL,CAAC,CACJ,CAAC;IACN,CAAC;IApBe,2BAAW,cAoB1B,CAAA;AACL,CAAC,EAxBgB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAwB/B;AAGD,IAAI,mBAAmB,GAAG,UAAU,QAAoD;IAEpF,IAAI,UAAU,GAA4B,EAAE,CAAC;IAE7C,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,eAAe,CAChD;QACI,KAAK,EAAE,EAAE,CAAC,gBAAgB,CAAC,uBAAa,EAAE,GAAG,kBAAkB,CAAC;KACnE,CACJ,CAAC;IAEF,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,IAAW;QACvC,EAAE,CAAC,CAAC,IAAI,KAAK,EAAE,IAAI,IAAI,KAAK,IAAI,CAAC,CACjC,CAAC;YACG,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,IAAI,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,aAAa,CAAC,CACxF,CAAC;gBACG,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAC9C,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,aAAa,CAAC,CACrE,CAAC;gBACG,IAAI,KAAK,GAAG,EAAE,CAAC;gBACf,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,GACA,CAAC;oBACG,OAAO,IAAI,IAAI,CAAC;oBAChB,KAAK,EAAE,CAAC;oBACR,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,CAAC,QAAQ,IAAI,KAAK,IAAI,EAAE,CAAA,uBAAuB;YACnD,CAAC;YAED,8BAA8B;YAC9B,EAAE,CAAC,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,OAAc,CAAC,CAAC,CAC5C,CAAC;gBACG,UAAU,CAAC,IAAI,CAAC,EAAC,IAAI,EAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC;YACjF,CAAC;QACL,CAAC;IAEL,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,EAAE,CAAC,OAAO,EACjB;QACI,QAAQ,CAAC,UAAU,CAAC,CAAC;IACzB,CAAC,CACJ,CAAC;AAEN,CAAC,CAAC","sourcesContent":["import * as fs from \"fs\";\nimport * as gracefulFs from \"graceful-fs\";\ngracefulFs.gracefulify(fs);\n\nimport RootDirectory from \"./RootDirectory\";\nimport {SymptomAttributes} from \"../../models/symptom\";\n\n\nexport namespace SymptomProvider {\n\n    let symptoms:Array<SymptomAttributes> = [];\n    export function getSymptoms()\n    {\n        return new Promise((resolve)=>\n            {\n                if (symptoms.length === 0)\n                {\n                    getSymptomsFromFile(\n                        function (symptomsFromFile)\n                        {\n                            symptoms = symptomsFromFile;\n                            resolve(symptoms);\n                        }\n                    );\n                }\n                else\n                {\n                    resolve(symptoms);\n                }\n            }\n        );\n    }\n}\n\n\nlet getSymptomsFromFile = function (callback:(dictionary:Array<SymptomAttributes>)=>void)\n{\n    let dictionary:Array<SymptomAttributes> = [];\n\n    let lineReader = require('readline').createInterface(\n        {\n            input: fs.createReadStream(RootDirectory() + 'resources/hp.obo')\n        }\n    );\n\n    lineReader.on('line', function (line:string) {\n        if (line !== \"\" && line !== \"\\n\")\n        {\n            let symptom = \"\";\n            if (line.substring(0, 6) === \"name: \" && line !== \"name: All\" && line !== \"name: All\\n\")\n            {\n                symptom = line.substring(6).toLowerCase();\n            }\n            else if (line.length > 10 && line.substring(0, 10) === \"synonym: \\\"\")\n            {\n                let index = 10;\n                let char = line.charAt(index);\n                do\n                {\n                    symptom += char;\n                    index++;\n                    char = line.charAt(index);\n                } while (char !== \"\\\"\");//Char different from \"\n            }\n\n            //Finally we add in dictionary\n            if (symptom !== \"\" && isNaN(symptom as any))\n            {\n                dictionary.push({name:symptom.replace(/[^A-Za-z0-9\\s]/g, '').toLowerCase()});\n            }\n        }\n\n    });\n\n    lineReader.on(\"close\",\n        function () {\n            callback(dictionary);\n        }\n    );\n\n};"]}