{"version":3,"file":"TextMining.js","sourceRoot":"","sources":["../../../../src/controllers/update/TextMining.ts"],"names":[],"mappings":";;AAAA,mDAA4C;AAIjC,QAAA,sCAAsC,GAAG,UAAS,YAAyC,EAAE,UAAiB;IAErH,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;QAE3B,OAAO,CAAC,IAAI,CAAC,0CAA0C,GAAC,UAAU,GAAC,MAAM,CAAC,CAAC;QAC3E,IAAI,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,uBAAa,EAAE,GAAC,mBAAmB,EAAC,YAAY,CAAC,CAAC,CAAC;QAEzH,IAAI,gBAAgB,GAAkC,EAAE,CAAC;QAEzD,8CAA8C;QAE9C,qEAAqE;QACrE,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAC5B,UAAS,IAAQ;YAEb,2EAA2E;YAE3E,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAE9B,yDAAyD;YACzD,IAAI,CAAC,GAAC,CAAC,CAAC;YACR,IAAI,kBAAkB,GAAC,KAAK,CAAC;YAC7B,OAAM,CAAC,kBAAkB,IAAI,CAAC,GAAG,gBAAgB,CAAC,MAAM,EACxD,CAAC;gBACG,EAAE,CAAA,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CACxC,CAAC;oBACG,kBAAkB,GAAG,IAAI,CAAC;gBAC9B,CAAC;gBACD,IAAI,CACJ,CAAC;oBACG,CAAC,EAAE,CAAC;gBACR,CAAC;YACL,CAAC;YAED,mCAAmC;YACnC,EAAE,CAAA,CAAC,kBAAkB,CAAC,CACtB,CAAC;gBACG,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;YACjC,CAAC;YACD,IAAI,CACJ,CAAC;gBACG,gBAAgB,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,UAAU,EAAC,UAAU,EAAC,CAAC,CAAC;YAC7E,CAAC;QACL,CAAC,CACJ,CAAC;QAEF,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,IAAQ;YAChD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,oBAAoB;QACpB,eAAe,CAAC,EAAE,CAAC,MAAM,EAAE;YACvB,OAAO,CAAC,IAAI,CAAC,0CAA0C,GAAC,UAAU,GAAC,WAAW,CAAC,CAAC;YAChF,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,qCAAqC;QACrC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAC,IAAI,CAAC,CAAC;IACnE,CAAC,CACJ,CAAC;AACN,CAAC,CAAC","sourcesContent":["import RootDirectory from \"./RootDirectory\";\nimport {PublicationAttributes} from \"../../models/publication\";\nimport {Disease_SymptomAttributes} from \"../../models/disease_symptom\";\n\nexport let giveSymptomsWithOccurrenceWithLingPipe = function(publications:Array<PublicationAttributes>, orphanetID:string)\n{\n    return new Promise((resolve, reject)=>\n        {\n            console.info(\"Text mining in publications of disease: \"+orphanetID+\" ...\");\n            let lingPipeProcess = require('child_process').spawn('java', ['-jar', RootDirectory()+\"jars/lingPipe.jar\",'anArgument']);\n\n            let symptomsWithSize:Array<Disease_SymptomAttributes>=[];\n\n            //console.log(\"Length: \"+publications.length);\n\n            //Work in progress (called several times, for each symptoms detected)\n            lingPipeProcess.stdout.on('data',\n                function(data:any)\n                {\n                    //console.log(\"Nombre de symptomes identifi√©s: \"+ symptomsWithSize.length);\n\n                    let symptom = data.toString();\n\n                    //Check if symptom already here and if true, give index i\n                    let i=0;\n                    let symptomAlreadyUsed=false;\n                    while(!symptomAlreadyUsed && i < symptomsWithSize.length)\n                    {\n                        if(symptomsWithSize[i].name === symptom)\n                        {\n                            symptomAlreadyUsed = true;\n                        }\n                        else\n                        {\n                            i++;\n                        }\n                    }\n\n                    //Increment counter or Add to array\n                    if(symptomAlreadyUsed)\n                    {\n                        symptomsWithSize[i].weight++;\n                    }\n                    else\n                    {\n                        symptomsWithSize.push({name: symptom, weight: 1, orphanetID:orphanetID});\n                    }\n                }\n            );\n\n            lingPipeProcess.stderr.on(\"data\", function (data:any) {\n                reject(Error(data.toString()));\n            });\n\n            //When it's finished\n            lingPipeProcess.on('exit', function() {\n                console.info(\"Text mining in publications of disease: \"+orphanetID+\" finished\");\n                resolve(symptomsWithSize);\n            });\n\n            //We send publications JSON via STDIN\n            lingPipeProcess.stdin.write(JSON.stringify(publications)+\"\\n\");\n        }\n    );\n};"]}