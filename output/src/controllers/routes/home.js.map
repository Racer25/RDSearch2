{"version":3,"file":"home.js","sourceRoot":"","sources":["../../../../src/controllers/routes/home.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport {DiseaseModel, DiseaseInstance} from \"../../models/disease\";\r\nimport * as Sequelize from \"sequelize\";\r\nimport Associations from \"../../models/associations\"\r\nimport {Disease_YearModel, Disease_YearInstance} from \"../../models/disease_year\";\r\nimport {YearModel, YearInstance} from \"../../models/year\";\r\nAssociations();\r\n\r\n/**\r\n * GET /\r\n * Home page.\r\n * @param {Request} req\r\n * @param {Response} res\r\n */\r\nexport let index = (req: Request, res: Response) => {\r\n    res.render(\"pages/search.ejs\");\r\n};\r\n\r\n/**\r\n * GET /suggestion/:searchString\r\n * Get suggestions of diseases using the searchString.\r\n * @param {Request} req\r\n * @param {Response} res\r\n */\r\nexport let getSuggestions = (req: Request, res: Response) =>\r\n{\r\n    let terms=req.params.searchString;\r\n    terms=terms.split(\",\");\r\n\r\n    if(terms.length !== 0)\r\n    {\r\n        //Construction of or clauses\r\n        let clauses = [];\r\n        for(let i = 0; i < terms.length; i++)\r\n        {\r\n            clauses.push({name:{[Sequelize.Op.like]: \"%\"+terms[i]+\"%\"}});\r\n        }\r\n\r\n        DiseaseModel.findAll(\r\n            {where:{[Sequelize.Op.or]:clauses}}\r\n        )\r\n            .then(\r\n                (results: Array<DiseaseInstance>) =>\r\n                {\r\n                    res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                    res.json(results);\r\n                }\r\n            )\r\n            .catch(\r\n                (err: Error) =>\r\n                {\r\n                    console.error(err);\r\n                }\r\n            );\r\n    }\r\n    else\r\n    {\r\n        res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n        res.json([]);\r\n    }\r\n\r\n\r\n};\r\n\r\n/**\r\n * GET /exactMatch/:searchString\r\n * Get disease corresponding to searchString.\r\n * @param {Request} req\r\n * @param {Response} res\r\n */\r\nexport let getExactMatch = (req: Request, res: Response) =>\r\n    {\r\n        let search=req.params.searchString;\r\n\r\n        DiseaseModel.findAll(\r\n            {where: {name: search}})\r\n            .then(\r\n                (results: Array<DiseaseInstance>) =>\r\n                {\r\n                    res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                    res.json(results);\r\n                }\r\n            )\r\n            .catch(\r\n                (err: Error) =>\r\n                {\r\n                    console.error(err);\r\n                }\r\n            );\r\n\r\n    };\r\n\r\n/**\r\n * GET /topDiseases/:year\r\n * Get the top of the most \"famous\" disease of a year\r\n * @param {Request} req\r\n * @param {Response} res\r\n */\r\nexport let getTopDiseases = (req: Request, res: Response) =>\r\n{\r\n    let year=req.params.year;\r\n\r\n    Disease_YearModel.findAll(\r\n        {\r\n            where: {year: year},\r\n\r\n            include: [\r\n                {\r\n                    model: DiseaseModel,\r\n                    where: { orphanetID: Sequelize.col('rareDisease.orphanetID') },\r\n                }\r\n            ],\r\n            order: Sequelize.literal('numberOfPublications DESC'),\r\n            limit: 3\r\n        })\r\n        .then(\r\n        (results: Array<Disease_YearInstance>) =>\r\n        {\r\n            res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n            res.json(results);\r\n        }\r\n    )\r\n        .catch(\r\n            (err: Error) =>\r\n            {\r\n                console.error(err);\r\n            }\r\n        );\r\n};\r\n\r\n/**\r\n * GET /years\r\n * Get all years in DB\r\n * @param {Request} req\r\n * @param {Response} res\r\n */\r\nexport let getYears = (req: Request, res: Response) =>\r\n{\r\n    YearModel.findAll()\r\n        .then(\r\n            (results: Array<YearInstance>) =>\r\n            {\r\n                res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                res.json(results);\r\n            }\r\n        )\r\n        .catch(\r\n            (err: Error) =>\r\n            {\r\n                console.error(err);\r\n            }\r\n        );\r\n};"]}