{"version":3,"file":"disease.js","sourceRoot":"","sources":["../../../../src/controllers/routes/disease.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as Sequelize from \"sequelize\";\r\nimport {Disease_YearModel, Disease_YearInstance} from \"../../models/disease_year\";\r\nimport {DiseaseModel, DiseaseInstance} from \"../../models/disease\";\r\nimport {Disease_SymptomModel, Disease_SymptomInstance} from \"../../models/disease_symptom\";\r\nimport {TextualInformationModel, TextualInformationInstance} from \"../../models/textualInformation\";\r\nimport {Disease_PublicationInstance, Disease_PublicationModel} from \"../../models/disease_publication\";\r\n\r\n/**\r\n * GET /disease/:orphanetID\r\n * Disease page.\r\n */\r\nexport let getDisease = (req: Request, res: Response) => {\r\n    let orphanetID=req.params.orphanetID;\r\n    res.render(\"pages/disease.ejs\", {orphanetID: orphanetID});\r\n};\r\n\r\n/**\r\n * GET /disease/:orphanetID/all\r\n * Get all infos related to a Disease.\r\n */\r\nexport let getDiseaseAll = (req: Request, res: Response) => {\r\n    let orphanetID=req.params.orphanetID;\r\n\r\n    let diseaseComplete:any ={};\r\n\r\n    DiseaseModel.findOne({where:{orphanetID:orphanetID}})\r\n        .then((results: DiseaseInstance ) =>\r\n            {\r\n                diseaseComplete.orphanetID=results.orphanetID;\r\n                diseaseComplete.name=results.name;\r\n                return TextualInformationModel.findAll({where:{orphanetID:orphanetID}});\r\n            }\r\n        )\r\n        .catch((err: Error) =>\r\n            {\r\n                console.error(err);\r\n                res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                res.json(diseaseComplete);\r\n            }\r\n        )\r\n        .then(\r\n            (textualInformation:Array<TextualInformationInstance>) =>\r\n            {\r\n                diseaseComplete.textualInformation=textualInformation;\r\n                return Disease_PublicationModel.findAll(\r\n                    {\r\n                        where: {orphanetID: orphanetID},\r\n\r\n                        include: [\r\n                            {\r\n                                model: DiseaseModel,\r\n                                where: { orphanetID: Sequelize.col('rareDisease.orphanetID') },\r\n                            }\r\n                        ],\r\n                        order: Sequelize.literal('timesCited DESC'),\r\n                        limit: 3\r\n                    });\r\n            }\r\n        )\r\n        .catch((err: Error) =>\r\n            {\r\n                console.error(err);\r\n                res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                res.json(diseaseComplete);\r\n            }\r\n        )\r\n        .then((mostCitedPublications: Array<Disease_PublicationInstance>) =>\r\n            {\r\n                diseaseComplete.mostCitedPublications = mostCitedPublications;\r\n                return Disease_YearModel.findAll({where:{orphanetID:orphanetID}});\r\n            }\r\n        )\r\n        .catch((err: Error) =>\r\n            {\r\n                console.error(err);\r\n                res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                res.json(diseaseComplete);\r\n            }\r\n        )\r\n        .then((graphData: Array<Disease_YearInstance>) =>\r\n            {\r\n                diseaseComplete.graphData = graphData;\r\n                return Disease_SymptomModel.findAll({where:{orphanetID:orphanetID}});\r\n            }\r\n        )\r\n        .catch((err: Error) =>\r\n            {\r\n                console.error(err);\r\n                res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                res.json(diseaseComplete);\r\n            }\r\n        )\r\n        .then((disease_symptom: Array<Disease_SymptomInstance>)=>\r\n            {\r\n                diseaseComplete.symptoms = disease_symptom;\r\n                res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                res.json(diseaseComplete);\r\n            }\r\n        );\r\n};\r\n\r\n/**\r\n * GET /disease/:orphanetID/info\r\n * Disease infos.\r\n */\r\nexport let getDiseaseInfo = (req: Request, res: Response) => {\r\n    let orphanetID=req.params.orphanetID;\r\n    DiseaseModel.findOne({where:{orphanetID:orphanetID}})\r\n        .then((results: DiseaseInstance ) =>\r\n            {\r\n                res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                res.json(results);\r\n            }\r\n        )\r\n        .catch((err: Error) =>\r\n            {\r\n                console.error(err);\r\n            }\r\n        );\r\n};\r\n\r\n\r\n/**\r\n * GET /disease/:orphanetID/textualsInformation\r\n * Disease textual information.\r\n */\r\nexport let getDiseaseTextualInformation = (req: Request, res: Response) => {\r\n    let orphanetID=req.params.orphanetID;\r\n\r\n    TextualInformationModel.findAll({where:{orphanetID:orphanetID}})\r\n        .then((results: any ) =>\r\n            {\r\n                res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                res.json(results);\r\n            }\r\n        )\r\n        .catch((err: Error) =>\r\n            {\r\n                console.error(err);\r\n            }\r\n        );\r\n};\r\n\r\n/**\r\n * GET /disease/:orphanetID/mostCitedPublications\r\n * Most cited publications related to a disease.\r\n */\r\nexport let getMostCitedPublications = (req: Request, res: Response) => {\r\n    let orphanetID=req.params.orphanetID;\r\n\r\n    Disease_PublicationModel.findAll(\r\n        {\r\n            where: {orphanetID: orphanetID},\r\n\r\n            include: [\r\n                {\r\n                    model: DiseaseModel,\r\n                    where: { orphanetID: Sequelize.col('rareDisease.orphanetID') },\r\n                }\r\n            ],\r\n            order: Sequelize.literal('timesCited DESC'),\r\n            limit: 3\r\n        })\r\n        .then(\r\n            (results: Array<Disease_PublicationInstance>) =>\r\n            {\r\n                res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n                res.json(results);\r\n            }\r\n        )\r\n        .catch(\r\n            (err: Error) =>\r\n            {\r\n                console.error(err);\r\n            }\r\n        );\r\n};\r\n\r\n\r\n/**\r\n * GET /disease/:orphanetID/graphData\r\n * @param {Request} req\r\n * @param {Response} res\r\n */\r\nexport let getGraphData = (req: Request, res: Response) =>\r\n{\r\n    let orphanetID=req.params.orphanetID;\r\n    Disease_YearModel.findAll({where:{orphanetID:orphanetID}})\r\n        .then(results =>\r\n        {\r\n            res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n            res.json(results);\r\n        })\r\n        .catch((err: Error) =>\r\n        {\r\n            console.error(err);\r\n        });\r\n};\r\n\r\n/**\r\n * GET /disease/:orphanetID/symptoms\r\n * @param {Request} req\r\n * @param {Response} res\r\n */\r\nexport let getSymptoms = (req: Request, res: Response) => {\r\n    let orphanetID=req.params.orphanetID;\r\n    Disease_SymptomModel.findAll({where:{orphanetID:orphanetID}})\r\n        .then(results =>\r\n        {\r\n            res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n            res.json(results);\r\n        })\r\n        .catch((err: Error) =>\r\n        {\r\n            console.error(err);\r\n        });\r\n};"]}