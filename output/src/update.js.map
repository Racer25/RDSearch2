{"version":3,"file":"update.js","sourceRoot":"","sources":["../../src/update.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Module dependencies\n */\nimport * as cron from \"cron\";\nimport * as fs from \"fs\";\nimport * as gracefulFs from \"graceful-fs\";\ngracefulFs.gracefulify(fs);\nimport * as http from \"http\";\n\n/**\n * Personnal modules\n */\nimport * as NCBI_API from \"./controllers/update/NCBI_API\";\nimport * as TextMining from \"./controllers/update/TextMining\"\nimport RootDirectory from \"./controllers/update/RootDirectory\";\nimport {SymptomProvider} from \"./controllers/update/SymptomProvider\";\n\n/**\n * Model dependencies\n */\nimport {OtherModel} from \"./models/other\";\nimport {DiseaseModel, DiseaseAttributes} from \"./models/disease\";\nimport {TextualInformationModel, TextualInformationAttributes} from \"./models/textualInformation\";\nimport {Disease_YearAttributes, Disease_YearModel} from \"./models/disease_year\";\nimport {YearAttributes, YearModel} from \"./models/year\";\nimport {Disease_PublicationAttributes,Disease_PublicationModel} from \"./models/disease_publication\";\nimport {PublicationAttributes, PublicationModel} from \"./models/publication\";\nimport {Disease_SymptomAttributes, Disease_SymptomModel} from \"./models/disease_symptom\";\nimport {SymptomAttributes, SymptomModel} from \"./models/symptom\";\n\n//Create the job\nlet job = new cron.CronJob(\n    {\n        cronTime: '00 31 13 * * 5-7',\n        onTick: function()\n        {\n            //Runs every weekday (Monday through Friday)\n            //at 16:24:00 AM. It does not run on Saturday\n            //or Sunday.\n            updateDB();\n        },\n        start: true,\n        timeZone: 'America/Montreal'\n    }\n);\n\n//Launch the Job!\n//job.start();\n\nexport let updateDB = function()\n{\n\n    let diseases:Array<DiseaseAttributes> = [];\n    let textualInformations: Array<TextualInformationAttributes> = [];\n    let listOfIdLists:Array<Array<number>> = [];\n    let listOfDiseasePublications:Array<Array<Disease_PublicationAttributes>> = [];\n    let listOfPublicationsPerDisease:Array<Array<PublicationAttributes>> = [];\n\n    download(\"http://www.orphadata.org/data/export/en_product1.json\",RootDirectory()+\"resources/en_product1.json\")\n        .catch(() =>\n            {\n                console.error(\"Error downloading!!\");\n            }\n        )\n        .then(()=> {return isThereAnUpdateForDiseasesList()} )\n        .then(()=>\n            {\n                getInformationFromJSON(diseases, textualInformations);\n\n                //Optional filter\n\n                diseases = diseases.filter(function(currentValue, index)\n                {\n                    return index < 10;\n                    //return currentValue.orphanetID >= \"70568\";\n                });\n\n                textualInformations = textualInformations.filter(function(currentValue, index)\n                {\n                    return index < 10;\n                    //return currentValue.orphanetID >= \"70568\";\n                });\n\n                //Construct array of promises\n                let promisesDiseases:Array<any> = [];\n                for(let i = 0; i < diseases.length; i++)\n                {\n                    promisesDiseases.push(\n                        DiseaseModel.upsert(\n                            {\n                                    orphanetID:diseases[i].orphanetID,\n                                    name:diseases[i].name\n                                }));\n                }\n\n                return Promise.all(promisesDiseases);\n            }\n        )\n        .then(() =>\n            {\n                console.info(\"Update of rarediseaseTable finished at \"+(new Date()).toISOString());\n                console.info(\"Updating of TextualInformation start...\");\n\n                //Construct array of promises\n                let promisesTextualInformations:Array<any> = [];\n                for(let i = 0; i < textualInformations.length; i++)\n                {\n                    promisesTextualInformations.push(\n                        TextualInformationModel.upsert(\n                            {\n                                idTextualInformation:textualInformations[i].idTextualInformation,\n                                title:textualInformations[i].title,\n                                content: textualInformations[i].content,\n                                sourceName: textualInformations[i].sourceName,\n                                sourceLink: textualInformations[i].sourceLink,\n                                orphanetID: textualInformations[i].orphanetID\n                            }));\n                }\n\n                return Promise.all(promisesTextualInformations);\n            }\n        )\n        .catch((err:Error) =>\n            {\n                if(err)\n                {\n                    console.error(\"Error during Promise.all process!\");\n                    return Promise.reject(Error(\"Error during Promise.all process!\"));\n                }\n                else\n                {\n                    //If no updates detected\n                    getInformationFromJSON(diseases, textualInformations);\n\n                    //Optional filter\n\n                    diseases = diseases.filter(function(currentValue, index)\n                    {\n                        return index < 10;\n                        //return currentValue.orphanetID >= \"70568\";\n                    });\n\n                    return Promise.resolve();\n                }\n            }\n        )\n        .then(\n            ()=>\n            {\n                let promisesGetIdsWithQuotes:Array<Promise<any>> = [];\n                for(let i = 0; i < diseases.length; i++)\n                {\n                    promisesGetIdsWithQuotes.push(\n                        NCBI_API.promiseThrottle.add(\n                            NCBI_API.getIdsFromSearch.bind(this, \"\\\"\"+diseases[i].name+\"\\\"\", diseases[i].orphanetID))\n                    );\n                }\n                return Promise.all(promisesGetIdsWithQuotes);\n\n                //RareDiseaseYear update\n\n                //Symptom update\n\n                //3 most cited articles for each disease\n\n            }\n        )\n        .then((listOfLists:Array<Array<number>>)=>\n            {\n                listOfIdLists = listOfLists;\n\n                let promisesGetIdsWithoutQuotes:Array<Promise<any>> = [];\n                let indexsOfZeroLength:Array<number> = [];\n                for(let i = 0; i < listOfIdLists.length; i++)\n                {\n\n                    if(listOfIdLists[i].length === 0)\n                    {\n                        indexsOfZeroLength.push(i);\n                        promisesGetIdsWithoutQuotes.push(\n                            NCBI_API.promiseThrottle.add(\n                                NCBI_API.getIdsFromSearch.bind(this, diseases[i].name, diseases[i].orphanetID))\n                        );\n                    }\n                }\n\n                return Promise.all(promisesGetIdsWithoutQuotes)\n                    .then((listOfListsWithoutQuotes:Array<Array<number>>)=>\n                        {\n                            for(let i = 0; i < listOfListsWithoutQuotes.length; i++)\n                            {\n                                listOfIdLists[indexsOfZeroLength[i]] = listOfListsWithoutQuotes[i];\n                            }\n\n                            //Limiting to 1000 ids\n                            for(let i = 0; i < listOfIdLists.length; i++)\n                            {\n                                listOfIdLists[i] = listOfIdLists[i].filter(function(currentValue, index)\n                                {\n                                    return index < 1000;\n                                });\n                            }\n                        }\n                    )\n                    .catch((err:Error)=> {console.error(err); });\n            }\n        )\n        .catch((err:Error)=> {console.error(err);})\n        .then(()=>\n            {\n                let promisesGetRareDiseaseYears:Array<Promise<any>> = [];\n                for(let i = 0; i < listOfIdLists.length; i++)\n                {\n                    promisesGetRareDiseaseYears.push(\n                        NCBI_API.promiseThrottle.add(\n                            NCBI_API.getRareDisease_YearFromIds.bind(this, listOfIdLists[i], diseases[i].orphanetID))\n                    );\n                }\n                return Promise.all(promisesGetRareDiseaseYears);\n            }\n        )\n        .catch((err:Error)=>{console.error(err);})\n        .then((listOfRareDiseaseYearLists:Array<Array<Disease_YearAttributes>>)=>\n            {\n                let promisesUpdateYears:Array<any> = [];\n                for(let i = 0; i < listOfRareDiseaseYearLists.length; i++)\n                {\n                    for(let j = 0; j < listOfRareDiseaseYearLists[i].length; j++)\n                    {\n                        let year:YearAttributes = {year: listOfRareDiseaseYearLists[i][j].year, numberOfPublications: 0};\n                        promisesUpdateYears.push(YearModel.upsert(year));\n                    }\n                }\n\n                console.info(\"Updating/Inserting Years in DB...\");\n                return Promise.all(promisesUpdateYears).then(()=>Promise.resolve(listOfRareDiseaseYearLists));\n            }\n        )\n        .catch((err:Error)=>{console.error(err);})\n        .then((listOfRareDiseaseYearLists:Array<Array<Disease_YearAttributes>>)=>\n            {\n                console.info(\"Updating/Inserting Years in DB finished\");\n                let promisesUpdateRareDiseaseYears:Array<any> = [];\n                for(let i = 0; i < listOfRareDiseaseYearLists.length; i++)\n                {\n                    for(let j = 0; j < listOfRareDiseaseYearLists[i].length; j++)\n                    {\n                        let rareDiseaseYear:Disease_YearAttributes =\n                            {\n                                year: listOfRareDiseaseYearLists[i][j].year,\n                                numberOfPublications: listOfRareDiseaseYearLists[i][j].numberOfPublications,\n                                orphanetID: diseases[i].orphanetID\n                            };\n                        promisesUpdateRareDiseaseYears.push(Disease_YearModel.upsert(rareDiseaseYear));\n                    }\n                }\n\n                console.info(\"Updating/Inserting RareDiseaseYears in DB...\");\n                return Promise.all(promisesUpdateRareDiseaseYears);\n            }\n        )\n        .catch((err:Error)=>{console.error(err);})\n        .then(()=>\n            {\n                console.info(\"Updating/Inserting RareDiseaseYears in DB finished\");\n                let promisesGetNumberPublicationsThatCiteGivingPublications:Array<Promise<any>> = [];\n                for(let i = 0; i < listOfIdLists.length; i++)\n                {\n                    promisesGetNumberPublicationsThatCiteGivingPublications.push(\n                        NCBI_API.promiseThrottle.add(\n                            NCBI_API.getNumberPublicationsThatCiteGivingPublications.bind(this, listOfIdLists[i]))\n                    );\n                }\n                return Promise.all(promisesGetNumberPublicationsThatCiteGivingPublications);\n            }\n        )\n        .catch((err:Error)=>{console.error(err)})\n        .then((listOfTimesCitedList:Array<Array<number>>)=>\n            {\n                console.info(\"Constructing rareDiseasePublication objects...\");\n                let listOfDiseasePublicationsPart:Array<Array<Disease_PublicationAttributes>> = [];\n                for(let i = 0; i < listOfTimesCitedList.length; i++)\n                {\n\n                    let rareDisease_mostCitedPublications:Array<Disease_PublicationAttributes> = [];\n                    for(let j = 0; j < listOfTimesCitedList[i].length; j++)\n                    {\n                        let diseasePublication:Disease_PublicationAttributes =\n                            {\n                                idPublication:listOfIdLists[i][j].toString(),\n                                orphanetID:diseases[i].orphanetID,\n                                timesCited: listOfTimesCitedList[i][j]\n                            };\n                        rareDisease_mostCitedPublications = dynamicSortingArray(diseasePublication, rareDisease_mostCitedPublications, 3)\n                    }\n                    listOfDiseasePublicationsPart.push(rareDisease_mostCitedPublications);\n                }\n                listOfDiseasePublications = listOfDiseasePublicationsPart;\n                console.info(\"Constructing rareDiseasePublications objects finished\");\n\n                let promisesGetPublications:Array<Promise<any>> = [];\n                for(let i = 0; i < listOfDiseasePublications.length; i++)\n                {\n                    promisesGetPublications.push(\n                        NCBI_API.promiseThrottle.add(\n                            NCBI_API.getPublications.bind(this, listOfDiseasePublications[i].map(\n                                currentValue=>currentValue.idPublication)))\n                    );\n                }\n                return Promise.all(promisesGetPublications);\n            }\n        )\n        .then((listOfPublicationsList:Array<Array<PublicationAttributes>>)=>\n        {\n            console.info(\"Updating/Inserting Most Cited Publication in DB ...\");\n            let promisesUpdatePublications:Array<any> = [];\n            for(let i = 0; i < listOfPublicationsList.length; i++)\n            {\n                for(let j = 0; j < listOfPublicationsList[i].length; j++)\n                {\n                    promisesUpdatePublications.push(PublicationModel.upsert(listOfPublicationsList[i][j]));\n                }\n            }\n            return Promise.all(promisesUpdatePublications);\n        })\n        .then(()=>\n            {\n                console.info(\"Updating/Inserting Most Cited Publication in DB finished\");\n                console.info(\"Updating/Inserting RareDiseasePublication in DB ...\");\n\n                let promisesUpdatePublications:Array<any> = [];\n                for(let i = 0; i < listOfDiseasePublications.length; i++)\n                {\n                    for(let j = 0; j < listOfDiseasePublications[i].length; j++)\n                    {\n                        promisesUpdatePublications.push(Disease_PublicationModel.upsert(listOfDiseasePublications[i][j]));\n                    }\n                }\n                return Promise.all(promisesUpdatePublications);\n            }\n        )\n        .then(()=>\n            {\n                //TODO\n                console.info(\"Updating/Inserting RareDiseasePublication in DB finished\");\n                console.info(\"Updating/Inserting Symptoms list in DB ...\");\n                SymptomProvider.getSymptoms().then((symptoms:Array<SymptomAttributes>)=>\n                    {\n                        let promiseUpdateSymptomList:Array<any> = [];\n                        for(let i = 0; i < symptoms.length; i++)\n                        {\n                            promiseUpdateSymptomList.push(SymptomModel.upsert(symptoms[i]));\n                        }\n\n                        return Promise.all(promiseUpdateSymptomList);\n                    }\n                );\n\n            }\n        )\n        .then(()=>\n            {\n                console.info(\"Updating/Inserting Symptoms list in DB finished\");\n                console.info(\"Getting publications of diseases for text mining ...\");\n\n                let promisesGetPublications:Array<any> = [];\n                for(let i = 0; i < listOfIdLists.length; i++)\n                {\n                    promisesGetPublications.push(NCBI_API.promiseThrottle.add(NCBI_API.getPublications.bind(this, listOfIdLists[i])));\n                }\n\n                return Promise.all(promisesGetPublications);\n\n            }\n        )\n        .then((listOfListOfPublication:Array<Array<PublicationAttributes>>)=>\n            {\n                console.info(\"Getting publications of diseases for text mining finished\");\n                console.info(\"Text mining for symptoms detection ...\");\n\n                listOfPublicationsPerDisease = listOfListOfPublication;\n\n                let promisesGiveSymptomsWithOccurrence:Array<any> = [];\n                for(let i = 0; i < listOfPublicationsPerDisease.length; i++)\n                {\n                    if(listOfPublicationsPerDisease[i].length !== 0)\n                    {\n                        promisesGiveSymptomsWithOccurrence.push(TextMining.giveSymptomsWithOccurrenceWithLingPipe(\n                            listOfPublicationsPerDisease[i], diseases[i].orphanetID));\n                    }\n                }\n\n                return Promise.all(promisesGiveSymptomsWithOccurrence);\n            }\n        )\n        .then((listOfSymptomsPerDisease:Array<Array<Disease_SymptomAttributes>>)=>\n            {\n                //Preprocessing symtoms weights ...\n\n                //Making a copie\n                let symptomsWithWeight = listOfSymptomsPerDisease.slice();\n\n                for(let i = 0; i < symptomsWithWeight.length; i++)\n                {\n                    /*\n                    //Exp to strenghten influence of big terms\n                    for(var i = 0; i < symptomsWithOccurrenceBis.length; i++)\n                    {\n                        symptomsWithOccurrenceBis[i].size=Math.exp(symptomsWithOccurrenceBis[i].size);\n                        console.log(symptomsWithOccurrenceBis[i]);\n                    }*/\n\n                    //Find Min and Max for Normalization\n                    let max = Math.max.apply(Math,symptomsWithWeight[i].map(function(o:Disease_SymptomAttributes){return o.weight;}));\n                    let min = Math.min.apply(Math,symptomsWithWeight[i].map(function(o:Disease_SymptomAttributes){return o.weight;}));\n\n                    //Normalization\n\n                    //If size==1\n                    if(max == min)\n                    {\n                        symptomsWithWeight[i][0].weight=15+(50-15)*symptomsWithWeight[i][0].weight;\n                    }\n                    else\n                    {\n                        for(let j = 0; j < symptomsWithWeight[i].length; j++)\n                        {\n                            symptomsWithWeight[i][j].weight=15+(50-15)*(symptomsWithWeight[i][j].weight-min)/(max-min);\n                        }\n                    }\n                }\n\n                console.info(\"Text mining for symptoms detection finished\");\n\n                //Working with the new list symptomsWithWeight\n                console.info(\"Updating/Inserting DiseaseSymptoms in DB ...\");\n\n                let promisesUpdateDiseaseSymptoms:Array<any> = [];\n                for(let i = 0; i < symptomsWithWeight.length; i++)\n                {\n                    for(let j = 0; j < symptomsWithWeight[i].length; j++)\n                    {\n                        promisesUpdateDiseaseSymptoms.push(Disease_SymptomModel.upsert(symptomsWithWeight[i][j]));\n                    }\n                }\n                return Promise.all(promisesUpdateDiseaseSymptoms);\n\n            }\n        )\n        .then(()=> {console.info(\"Updating/Inserting DiseaseSymptoms in DB finished\");})\n        .catch((err:Error)=>{console.error(err)});\n};\n\nexport let download = function(url:string, dest:string)\n{\n    return new Promise((resolve, reject)=>\n    {\n        console.info(\"Download of file \"+dest+\" start...\");\n        let file = fs.createWriteStream(dest);\n        http.get(url, function(response) {\n            response.pipe(file);\n            file.on('finish', function() {\n                console.info(\"Download finished\");\n                file.close();  // close() is async, call cb after close completes.\n                resolve();\n            });\n        }).on('error', function() {\n            // Handle errors\n            fs.unlink(dest, reject); // Delete the file async. (But we don't check the result)\n        });\n    }\n    );\n};\n\nexport let isThereAnUpdateForDiseasesList =  function()\n{\n    return new Promise((resolve, reject) =>\n    {\n        let json = require(RootDirectory()+\"resources/en_product1.json\");\n        let lastUpdateDateFromJSON=json.JDBOR[0].date.substring(0, 10);\n\n        return OtherModel.findOne()\n            .then(\n                otherTable=>\n                {\n                    console.log(\"DB: \"+otherTable.lastUpdatedate+\", JSON: \"+lastUpdateDateFromJSON);\n\n                    let lastUpdateDateFromDB=new Date(otherTable.lastUpdatedate);\n                    let lastUpdateDateFromJSON_DATE=new Date(Date.parse(lastUpdateDateFromJSON));\n\n                    if(lastUpdateDateFromDB === undefined || lastUpdateDateFromDB === null\n                        || lastUpdateDateFromJSON_DATE > lastUpdateDateFromDB)\n                    {\n                        console.log(\"Update found\");\n                        return OtherModel.update(\n                            {\n                                idOther: 1,\n                                lastUpdatedate: lastUpdateDateFromJSON\n                            },\n                            { where: { idOther: 1 } }\n                            )\n                            .then(()=>{resolve();})\n                            .catch(()=>{reject(Error(\"Error updating other table\"))});\n                    }\n                    else\n                    {\n                        console.log(\"No update found\");\n                        reject();\n                    }\n                }\n            );\n    }\n    );\n};\n\nexport let getInformationFromJSON = function(diseases:Array<DiseaseAttributes>, textualInformations: Array<TextualInformationAttributes>)\n{\n    let json = require(RootDirectory()+\"resources/en_product1.json\");\n\n    let disorderList = json.JDBOR[0].DisorderList[0].Disorder;\n\n    for(let m =0; m<disorderList.length; m++)\n    {\n        let disorder=disorderList[m];\n        let isADisorder =\n            disorder.DisorderType[0].Name[0].label === \"Disease\" ||\n            disorder.DisorderType[0].Name[0].label === \"Clinical syndrome\" ||\n            disorder.DisorderType[0].Name[0].label === \"Malformation syndrome\" ||\n            disorder.DisorderType[0].Name[0].label === \"Biological anomaly\" ||\n            disorder.DisorderType[0].Name[0].label === \"Morphological anomaly\" ||\n            disorder.DisorderType[0].Name[0].label === \"Particular clinical situation in a disease or syndrome\";\n\n        if(isADisorder)\n        {\n            let orphanetID= disorder.OrphaNumber;\n            let name= disorder.Name[0].label;\n            let sourceName=\"Orphanet\";\n            let sourceLink=disorder.ExpertLink[0].link;\n\n            for(let i = 0; i < disorder.TextualInformationList.length; i++)\n            {\n                if(disorder.TextualInformationList[i].count != \"0\")\n                {\n                    for(let j = 0; j < disorder.TextualInformationList[i].TextualInformation.length; j++)\n                    {\n                        for(let k = 0; k < disorder.TextualInformationList[i].TextualInformation[j].TextSectionList.length; k++)\n                        {\n                            if(disorder.TextualInformationList[i].TextualInformation[j].TextSectionList[k].count != \"0\")\n                            {\n                                let textSection=disorder.TextualInformationList[i].TextualInformation[j].TextSectionList[k].TextSection;\n                                for(let l = 0; l < textSection.length; l++)\n                                {\n                                    let title=textSection[l].TextSectionType[0].Name[0].label;\n                                    let content=textSection[l].Contents;\n                                    let id=textSection[l].id;\n\n                                    let textualInformation:TextualInformationAttributes =\n                                        {\n                                            idTextualInformation: id,\n                                            title: title,\n                                            content: content,\n                                            orphanetID:orphanetID,\n                                            sourceName: sourceName,\n                                            sourceLink: sourceLink\n                                        };\n\n                                    textualInformations.push(textualInformation);\n                                }\n                            }\n\n                        }\n                    }\n                }\n\n            }\n\n\n            let disease:DiseaseAttributes = {orphanetID: orphanetID, name: name};\n\n            diseases.push(disease);\n        }\n    }\n};\n\nlet dynamicSortingArray = function(val:Disease_PublicationAttributes, array:Array<Disease_PublicationAttributes>, length:number)\n{\n    let index=0;\n    for(let i = 0; i < array.length; i++)\n    {\n        if(array[i].timesCited > val.timesCited)\n        {\n            index++;\n        }\n    }\n    array.splice(index, 0, val);\n    if(array.length > length)\n    {\n        array.pop();\n    }\n    return array;\n};\n\n"]}